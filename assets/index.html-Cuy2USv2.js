import{_ as s,c as a,a as e,o as t}from"./app-CqR1JG51.js";const p="data:image/svg+xml,%3csvg%20width='256'%20height='256'%20viewBox='0%200%20256%20256'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M139.511%20210L125.511%20196.182L193.148%20128.545L125.511%2061.0909L139.511%2047.0909L220.966%20128.545L139.511%20210ZM33.875%20160.182V140.182H195.875L175.875%20160.182H33.875ZM33.875%20116.909V96.9091H175.875L195.875%20116.909H33.875Z'%20fill='%238888FF'/%3e%3c/svg%3e",o={};function c(l,n){return t(),a("div",null,[...n[0]||(n[0]=[e('<h1 id="evnty" tabindex="-1"><a class="header-anchor" href="#evnty"><span>Evnty</span></a></h1><p><a href="https://codecov.io/gh/3axap4eHko/evnty" target="_blank" rel="noopener noreferrer"><img src="https://codecov.io/gh/3axap4eHko/evnty/branch/master/graph/badge.svg?maxAge=43200" alt="Coverage Status"></a><a href="https://github.com/3axap4eHko/evnty/actions" target="_blank" rel="noopener noreferrer"><img src="https://github.com/3axap4eHko/evnty/actions/workflows/build.yml/badge.svg?branch=master" alt="Github Build Status"></a><a href="https://www.npmjs.com/package/evnty" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/evnty.svg?maxAge=43200" alt="NPM version"></a><a href="https://www.npmjs.com/package/evnty" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dw/evnty.svg?maxAge=43200" alt="Downloads"></a><a href="https://snyk.io/test/npm/evnty/latest" target="_blank" rel="noopener noreferrer"><img src="https://snyk.io/test/github/3axap4eHko/evnty/badge.svg?maxAge=43200" alt="Snyk"></a></p><p>Async-first, reactive event handling library for complex event flows with three powerful primitives: <strong>Event</strong> (multi-listener broadcast), <strong>Signal</strong> (promise-like coordination), and <strong>Sequence</strong> (async queue). Built for both browser and Node.js with full TypeScript support.</p><div align="center"><a href="https://github.com/3axap4ehko/evnty"><img width="200" height="200" src="'+p+`"></a><br><br></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h2><ul><li><p><a href="#core-concepts">Core Concepts</a></p></li><li><p><a href="#motivation">Motivation</a></p></li><li><p><a href="#features">Features</a></p></li><li><p><a href="#platform-support">Platform Support</a></p></li><li><p><a href="#installing">Installing</a></p></li><li><p><a href="#api">API</a></p><ul><li><p><a href="#eventresult"><code>EventResult</code></a></p><ul><li><a href="#eventresultconstructorresults-maybepromise"><code>eventresult.constructor(results: MaybePromise[])</code></a></li><li><a href="#eventresultthenonfulfilled-onrejected-promiselike"><code>eventresult.then(onfulfilled, onrejected): PromiseLike</code></a></li><li><a href="#eventresultall-promise"><code>eventresult.all(): Promise</code></a></li><li><a href="#eventresultsettled-promise"><code>eventresult.settled(): Promise</code></a></li></ul></li><li><p><a href="#event"><code>Event</code></a></p><ul><li><p><a href="#eventconstructordispose-callback"><code>event.constructor(dispose?: Callback)</code></a></p></li><li><p><a href="#eventsize-number"><code>event.size(): number</code></a></p></li><li><p><a href="#eventdisposed-boolean"><code>event.disposed(): boolean</code></a></p></li><li><p><a href="#eventlackslistener-listener-boolean"><code>event.lacks(listener: Listener): boolean</code></a></p></li><li><p><a href="#eventhaslistener-listener-boolean"><code>event.has(listener: Listener): boolean</code></a></p></li><li><p><a href="#eventofflistener-listener-this"><code>event.off(listener: Listener): this</code></a></p></li><li><p><a href="#eventonlistener-listener-unsubscribe"><code>event.on(listener: Listener): Unsubscribe</code></a></p></li><li><p><a href="#eventoncelistener-listener-unsubscribe"><code>event.once(listener: Listener): Unsubscribe</code></a></p></li><li><p><a href="#eventclear-this"><code>event.clear(): this</code></a></p></li><li><p><a href="#eventnext-promise"><code>event.next(): Promise</code></a></p></li><li><p><a href="#eventsettle-promise"><code>event.settle(): Promise</code></a></p></li><li><p><a href="#eventsymbolasynciterator-asynciterator"><code>event.Symbol.asyncIterator(): AsyncIterator</code></a></p></li><li><p><a href="#eventsymboldispose-void"><code>event.Symbol.dispose(): void</code></a></p></li></ul></li><li><p><a href="#mergeevents-events-event"><code>merge(...events: Events): Event</code></a></p></li><li><p><a href="#createintervalinterval-number-event"><code>createInterval(interval: number): Event</code></a></p></li><li><p><a href="#createevent-event"><code>createEvent(): Event</code></a></p></li><li><p><a href="#asynciteratorobject"><code>AsyncIteratorObject</code></a></p><ul><li><a href="#asynciteratorobjectfromiterable-iterable-asynciteratorobject"><code>asynciteratorobject.from(iterable: Iterable): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectmergeiterables-asynciterable-asynciteratorobject"><code>asynciteratorobject.merge(...iterables: AsyncIterable[]): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectconstructoriterable-asynciterable"><code>asynciteratorobject.constructor(iterable: AsyncIterable)</code></a></li><li><a href="#asynciteratorobjectpipegeneratorfactory-signal-abortsignal-asynciteratorobject"><code>asynciteratorobject.pipe(generatorFactory, signal?: AbortSignal): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectmapcallbackfn-asynciteratorobject"><code>asynciteratorobject.map(callbackfn): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectfilterpredicate-asynciteratorobject"><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectfilterpredicate-asynciteratorobject"><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectfilterpredicate-asynciteratorobject"><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjecttakelimit-number-asynciteratorobject"><code>asynciteratorobject.take(limit: number): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectdropcount-number-asynciteratorobject"><code>asynciteratorobject.drop(count: number): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectflatmapcallback-asynciteratorobject"><code>asynciteratorobject.flatMap(callback): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectreducecallbackfn-asynciteratorobject"><code>asynciteratorobject.reduce(callbackfn): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectreducecallbackfn-initialvalue-r-asynciteratorobject"><code>asynciteratorobject.reduce(callbackfn, initialValue: R): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectreducecallbackfn-args-unknown-asynciteratorobject"><code>asynciteratorobject.reduce(callbackfn, ...args: unknown[]): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectexpandcallbackfn-asynciteratorobject"><code>asynciteratorobject.expand(callbackfn): AsyncIteratorObject</code></a></li><li><a href="#asynciteratorobjectsymbolasynciterator"><code>asynciteratorobject.Symbol.asyncIterator()</code></a></li></ul></li><li><p><a href="#sequence"><code>Sequence</code></a></p><ul><li><p><a href="#sequencemergetarget-sequence-sequences-sequence-void"><code>sequence.merge(target: Sequence, ...sequences: Sequence[]): void</code></a></p></li><li><p><a href="#sequenceconstructorprivate-readonly-abortsignal-abortsignal"><code>sequence.constructor(private readonly abortSignal?: AbortSignal)</code></a></p></li><li><p><a href="#sequencesize-number"><code>sequence.size(): number</code></a></p></li><li><p><a href="#sequencereservecapacity-number-promise"><code>sequence.reserve(capacity: number): Promise</code></a></p></li><li><p><a href="#sequencenext-promise"><code>sequence.next(): Promise</code></a></p></li><li><p><a href="#sequencesymboldispose-void"><code>sequence.Symbol.dispose(): void</code></a></p></li></ul></li><li><p><a href="#signal"><code>Signal</code></a></p><ul><li><p><a href="#signalmergetarget-signal-signals-signal-void"><code>signal.merge(target: Signal, ...signals: Signal[]): void</code></a></p></li><li><p><a href="#signalconstructorprivate-readonly-abortsignal-abortsignal"><code>signal.constructor(private readonly abortSignal?: AbortSignal)</code></a></p></li><li><p><a href="#signalaborted-boolean"><code>signal.aborted(): boolean</code></a></p></li><li><p><a href="#signalnext-promise"><code>signal.next(): Promise</code></a></p></li><li><p><a href="#signalsymboldispose-void"><code>signal.Symbol.dispose(): void</code></a></p></li></ul></li><li><p><a href="#iterateargs-number-iterable"><code>iterate(...args: number[]): Iterable</code></a></p></li><li><p><a href="#toasynciterableiterable-iterable-asynciterable"><code>toAsyncIterable(iterable: Iterable): AsyncIterable</code></a></p></li></ul></li><li><p><a href="#examples">Examples</a></p></li><li><p><a href="#license">License</a></p></li></ul><h2 id="core-concepts" tabindex="-1"><a class="header-anchor" href="#core-concepts"><span>Core Concepts</span></a></h2><p>Evnty provides three complementary async primitives, each designed for specific patterns:</p><h3 id="-event-multi-listener-broadcasting" tabindex="-1"><a class="header-anchor" href="#-event-multi-listener-broadcasting"><span>ðŸ”Š Event - Multi-Listener Broadcasting</span></a></h3><p>Events allow multiple listeners to react to values. All registered listeners are called for each emission.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple listeners can subscribe</span></span>
<span class="line">clickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Click at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">clickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateUI</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// All listeners receive the value</span></span>
<span class="line"><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Use Event when:</strong></p><ul><li>Multiple components need to react to the same occurrence</li><li>You need pub/sub or observer pattern</li><li>Listeners should persist across multiple emissions</li></ul><h3 id="-signal-promise-based-coordination" tabindex="-1"><a class="header-anchor" href="#-signal-promise-based-coordination"><span>ðŸ“¡ Signal - Promise-Based Coordination</span></a></h3><p>Signals are for coordinating async operations. When a value is sent, ALL waiting consumers receive it (broadcast).</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> signal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple consumers can wait</span></span>
<span class="line"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> signal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> promise2 <span class="token operator">=</span> signal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Send value - all waiting consumers receive it</span></span>
<span class="line"><span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// result1 === &#39;data&#39; &amp;&amp; result2 === &#39;data&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Use Signal when:</strong></p><ul><li>You need one-time notifications</li><li>Multiple async operations need the same trigger</li><li>Implementing async coordination patterns</li></ul><h3 id="-sequence-async-queue-fifo" tabindex="-1"><a class="header-anchor" href="#-sequence-async-queue-fifo"><span>ðŸ“¦ Sequence - Async Queue (FIFO)</span></a></h3><p>Sequences are FIFO queues for single-consumer scenarios. Values are consumed in order, with backpressure support.</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span>Task<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Producer adds tasks</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span>task1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span>task2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span>task3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Single consumer processes in order</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> task <span class="token keyword">of</span> taskQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">processTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// task1, then task2, then task3</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Use Sequence when:</strong></p><ul><li>You need ordered processing (FIFO)</li><li>Only one consumer should handle each value</li><li>You want backpressure control with <code>reserve()</code></li></ul><h3 id="key-differences" tabindex="-1"><a class="header-anchor" href="#key-differences"><span>Key Differences</span></a></h3><table><thead><tr><th></th><th>Event</th><th>Signal</th><th>Sequence</th></tr></thead><tbody><tr><td><strong>Consumers</strong></td><td>Multiple persistent listeners</td><td>Multiple one-time receivers</td><td>Single consumer</td></tr><tr><td><strong>Delivery</strong></td><td>All listeners called</td><td>All waiting get same value</td><td>Each value consumed once</td></tr><tr><td><strong>Pattern</strong></td><td>Pub/Sub</td><td>Broadcast coordination</td><td>Queue/Stream</td></tr><tr><td><strong>Persistence</strong></td><td>Listeners stay registered</td><td>Resolves once per <code>next()</code></td><td>Values queued until consumed</td></tr></tbody></table><h2 id="motivation" tabindex="-1"><a class="header-anchor" href="#motivation"><span>Motivation</span></a></h2><p>Traditional event handling in JavaScript/TypeScript has limitations:</p><ul><li>String-based event names lack type safety</li><li>No built-in async coordination primitives</li><li>Missing functional transformations for event streams</li><li>Complex patterns require extensive boilerplate</li></ul><p>Evnty solves these problems by providing:</p><ul><li><strong>Type-safe events</strong> with full TypeScript inference</li><li><strong>Three specialized primitives</strong> for different async patterns</li><li><strong>Rich functional operators</strong> (map, filter, reduce, debounce, batch, etc.)</li><li><strong>Composable abstractions</strong> that work together seamlessly</li></ul><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li><strong>Async-First Design</strong>: Built from the ground up for asynchronous event handling with full Promise support</li><li><strong>Functional Programming</strong>: Rich set of operators including map, filter, reduce, debounce, batch, and expand for event stream transformations</li><li><strong>Type-Safe</strong>: Full TypeScript support with strong typing and inference throughout the event pipeline</li><li><strong>Async Iteration</strong>: Events can be consumed as async iterables using for-await-of loops</li><li><strong>Event Composition</strong>: Merge, combine, and transform multiple event streams into new events</li><li><strong>Minimal Dependencies</strong>: Lightweight with only essential dependencies for optimal bundle size</li><li><strong>Universal</strong>: Works seamlessly in both browser and Node.js environments, including service workers</li></ul><h2 id="platform-support" tabindex="-1"><a class="header-anchor" href="#platform-support"><span>Platform Support</span></a></h2><table><thead><tr><th><img src="https://raw.github.com/alrra/browser-logos/main/src/node.js/node.js_48x48.png?1" alt="NodeJS"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png?1" alt="Chrome"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png?1" alt="Firefox"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/safari/safari_48x48.png?1" alt="Safari"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/opera/opera_48x48.png?1" alt="Opera"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/edge/edge_48x48.png?1" alt="Edge"></th></tr></thead><tbody><tr><td>Latest âœ”</td><td>Latest âœ”</td><td>Latest âœ”</td><td>Latest âœ”</td><td>Latest âœ”</td><td>Latest âœ”</td></tr></tbody></table><h2 id="installing" tabindex="-1"><a class="header-anchor" href="#installing"><span>Installing</span></a></h2><p>Using pnpm:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using yarn:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">yarn</span> <span class="token function">add</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using npm:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><h3 id="eventresult" tabindex="-1"><a class="header-anchor" href="#eventresult"><span><code>EventResult</code></span></a></h3><p>Wraps an array of values or promises (typically listener results) and provides batch resolution.</p><ul><li>@template T</li></ul><h4 id="eventresultconstructorresults-maybepromise" tabindex="-1"><a class="header-anchor" href="#eventresultconstructorresults-maybepromise"><span><code>eventresult.constructor(results: MaybePromise[])</code></span></a></h4><ul><li>@param results - An array of values or Promise-returning listener calls.</li></ul><h4 id="eventresultthenonfulfilled-onrejected-promiselike" tabindex="-1"><a class="header-anchor" href="#eventresultthenonfulfilled-onrejected-promiselike"><span><code>eventresult.then(onfulfilled, onrejected): PromiseLike</code></span></a></h4><h4 id="eventresultall-promise" tabindex="-1"><a class="header-anchor" href="#eventresultall-promise"><span><code>eventresult.all(): Promise</code></span></a></h4><p>Resolves all listener results, rejecting if any promise rejects.</p><ul><li>@returns <code>{Promise&lt;T[]&gt;}</code> A promise that fulfills with an array of all resolved values.</li></ul><h4 id="eventresultsettled-promise" tabindex="-1"><a class="header-anchor" href="#eventresultsettled-promise"><span><code>eventresult.settled(): Promise</code></span></a></h4><p>Waits for all listener results to settle, regardless of fulfillment or rejection.</p><ul><li>@returns <code>{Promise&lt;PromiseSettledResult&lt;T&gt;[]&gt;}</code> A promise that fulfills with an array of each result&#39;s settled status and value/reason.</li></ul><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event"><span><code>Event</code></span></a></h3><p>A class representing a multi-listener event emitter with async support. Events allow multiple listeners to react to emitted values, with each listener potentially returning a result. All listeners are called for each emission.</p><p>Key characteristics:</p><ul><li>Multiple listeners - all are called for each emission</li><li>Listeners can return values collected in EventResult</li><li>Supports async listeners and async iteration</li><li>Provides lifecycle hooks for listener management</li><li>Memory efficient using RingBuffer for storage</li></ul><p>Differs from:</p><ul><li><p>Signal: Events have multiple persistent listeners vs Signal&#39;s one-time resolution per consumer</p></li><li><p>Sequence: Events broadcast to all listeners vs Sequence&#39;s single consumer queue</p></li><li><p>@template T - The type of value emitted to listeners (event payload)</p></li><li><p>@template R - The return type of listener functions</p></li></ul><h4 id="eventconstructordispose-callback" tabindex="-1"><a class="header-anchor" href="#eventconstructordispose-callback"><span><code>event.constructor(dispose?: Callback)</code></span></a></h4><p>Creates a new event.</p><ul><li>@param dispose - A function to call on the event disposal.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a click event.</span></span>
<span class="line"><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">clickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Clicked at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventsize-number" tabindex="-1"><a class="header-anchor" href="#eventsize-number"><span><code>event.size(): number</code></span></a></h4><p>The number of listeners for the event.</p><ul><li>@readonly</li><li>@type <code>{number}</code></li></ul><h4 id="eventdisposed-boolean" tabindex="-1"><a class="header-anchor" href="#eventdisposed-boolean"><span><code>event.disposed(): boolean</code></span></a></h4><p>Checks if the event has been disposed.</p><ul><li>@returns <code>{boolean}</code> <code>true</code> if the event has been disposed; otherwise, <code>false</code>.</li></ul><h4 id="eventlackslistener-listener-boolean" tabindex="-1"><a class="header-anchor" href="#eventlackslistener-listener-boolean"><span><code>event.lacks(listener: Listener): boolean</code></span></a></h4><p>Checks if the given listener is NOT registered for this event.</p><ul><li>@param listener - The listener function to check against the registered listeners.</li><li>@returns <code>{boolean}</code> <code>true</code> if the listener is not already registered; otherwise, <code>false</code>.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Check if a listener is not already added</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">lacks</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventhaslistener-listener-boolean" tabindex="-1"><a class="header-anchor" href="#eventhaslistener-listener-boolean"><span><code>event.has(listener: Listener): boolean</code></span></a></h4><p>Checks if the given listener is registered for this event.</p><ul><li>@param listener - The listener function to check.</li><li>@returns <code>{boolean}</code> <code>true</code> if the listener is currently registered; otherwise, <code>false</code>.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Verify if a listener is registered</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Listener is already registered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventofflistener-listener-this" tabindex="-1"><a class="header-anchor" href="#eventofflistener-listener-this"><span><code>event.off(listener: Listener): this</code></span></a></h4><p>Removes a specific listener from this event.</p><ul><li>@param listener - The listener to remove.</li><li>@returns <code>{this}</code> The event instance, allowing for method chaining.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Remove a listener</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventonlistener-listener-unsubscribe" tabindex="-1"><a class="header-anchor" href="#eventonlistener-listener-unsubscribe"><span><code>event.on(listener: Listener): Unsubscribe</code></span></a></h4><p>Registers a listener that gets triggered whenever the event is emitted. This is the primary method for adding event handlers that will react to the event being triggered.</p><ul><li>@param listener - The function to call when the event occurs.</li><li>@returns <code>{Unsubscribe}</code> An object that can be used to unsubscribe the listener, ensuring easy cleanup.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Add a listener to an event</span></span>
<span class="line"><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event data:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventoncelistener-listener-unsubscribe" tabindex="-1"><a class="header-anchor" href="#eventoncelistener-listener-unsubscribe"><span><code>event.once(listener: Listener): Unsubscribe</code></span></a></h4><p>Adds a listener that will be called only once the next time the event is emitted. This method is useful for one-time notifications or single-trigger scenarios.</p><ul><li>@param listener - The listener to trigger once.</li><li>@returns <code>{Unsubscribe}</code> An object that can be used to remove the listener if the event has not yet occurred.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Register a one-time listener</span></span>
<span class="line"><span class="token keyword">const</span> onceUnsubscribe <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received data once:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventclear-this" tabindex="-1"><a class="header-anchor" href="#eventclear-this"><span><code>event.clear(): this</code></span></a></h4><p>Removes all listeners from the event, effectively resetting it. This is useful when you need to cleanly dispose of all event handlers to prevent memory leaks or unwanted triggers after certain conditions.</p><ul><li>@returns <code>{this}</code> The instance of the event, allowing for method chaining.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myEvent<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Clears all listeners</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventnext-promise" tabindex="-1"><a class="header-anchor" href="#eventnext-promise"><span><code>event.next(): Promise</code></span></a></h4><p>Waits for the next event emission and returns the emitted value. This method allows the event to be used as a promise that resolves with the next emitted value.</p><ul><li>@returns <code>{Promise&lt;T&gt;}</code> A promise that resolves with the next emitted event value.</li></ul><h4 id="eventsettle-promise" tabindex="-1"><a class="header-anchor" href="#eventsettle-promise"><span><code>event.settle(): Promise</code></span></a></h4><p>Waits for the event to settle, returning a <code>PromiseSettledResult</code>.</p><ul><li><p>@returns <code>{Promise&lt;PromiseSettledResult&lt;T&gt;&gt;}</code> A promise that resolves with the settled result.</p></li><li><p>@example</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> event<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event fulfilled with value:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Event rejected with reason:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventsymbolasynciterator-asynciterator" tabindex="-1"><a class="header-anchor" href="#eventsymbolasynciterator-asynciterator"><span><code>event.Symbol.asyncIterator(): AsyncIterator</code></span></a></h4><p>Makes this event iterable using <code>for await...of</code> loops.</p><ul><li>@returns <code>{AsyncIterator&lt;T&gt;}</code> An async iterator that yields values as they are emitted by this event.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Assuming an event that emits numbers</span></span>
<span class="line"><span class="token keyword">const</span> numberEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> numberEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number:&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventsymboldispose-void" tabindex="-1"><a class="header-anchor" href="#eventsymboldispose-void"><span><code>event.Symbol.dispose(): void</code></span></a></h4><h3 id="mergeevents-events-event" tabindex="-1"><a class="header-anchor" href="#mergeevents-events-event"><span><code>merge(...events: Events): Event</code></span></a></h3><p>Merges multiple events into a single event. This function takes any number of <code>Event</code> instances and returns a new <code>Event</code> that triggers whenever any of the input events trigger. The parameters and results of the merged event are derived from the input events, providing a flexible way to handle multiple sources of events in a unified manner.</p><ul><li>@template Events - An array of <code>Event</code> instances.</li><li>@param events - A rest parameter that takes multiple events to be merged.</li><li>@returns <code>{Event&lt;AllEventsParameters&lt;Events&gt;, AllEventsResults&lt;Events&gt;&gt;}</code> Returns a new <code>Event</code> instance that triggers with the parameters and results of any of the merged input events.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Merging mouse and keyboard events into a single event</span></span>
<span class="line"><span class="token keyword">const</span> mouseEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>MouseEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keyboardEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>KeyboardEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> inputEvent <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">,</span> keyboardEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">inputEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Input event:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createintervalinterval-number-event" tabindex="-1"><a class="header-anchor" href="#createintervalinterval-number-event"><span><code>createInterval(interval: number): Event</code></span></a></h3><p>Creates a periodic event that triggers at a specified interval. The event will automatically emit an incrementing counter value each time it triggers, starting from zero. This function is useful for creating time-based triggers within an application, such as updating UI elements, polling, or any other timed operation.</p><ul><li>@template R - The return type of the event handler function, defaulting to <code>void</code>.</li><li>@param interval - The interval in milliseconds at which the event should trigger.</li><li>@returns <code>{Event&lt;number, R&gt;}</code> An <code>Event</code> instance that triggers at the specified interval, emitting an incrementing counter value.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Creating an interval event that logs a message every second</span></span>
<span class="line"><span class="token keyword">const</span> tickEvent <span class="token operator">=</span> <span class="token function">createInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>tickNumber <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tick:&#39;</span><span class="token punctuation">,</span> tickNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createevent-event" tabindex="-1"><a class="header-anchor" href="#createevent-event"><span><code>createEvent(): Event</code></span></a></h3><p>Creates a new Event instance for multi-listener event handling. This is the primary way to create events in the library.</p><ul><li>@template T - The type of value emitted to listeners (event payload)</li><li>@template R - The return type of listener functions (collected in EventResult)</li><li>@returns <code>{Event&lt;T, R&gt;}</code> A new Event instance ready for listener registration</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create an event that accepts a string payload</span></span>
<span class="line"><span class="token keyword">const</span> messageEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">messageEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>msg <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received:&#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">messageEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// All listeners receive &#39;Hello&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create an event where listeners return values</span></span>
<span class="line"><span class="token keyword">const</span> validateEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">validateEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>str <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">validateEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>str <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">validateEvent</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// EventResult with [true, true]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobject"><span><code>AsyncIteratorObject</code></span></a></h3><p>A wrapper class providing functional operations on async iterables. Enables lazy evaluation and chainable transformations on async data streams.</p><p>Key characteristics:</p><ul><li><p>Lazy evaluation - operations are not executed until iteration begins</p></li><li><p>Chainable - all transformation methods return new AsyncIteratorObject instances</p></li><li><p>Supports both sync and async transformation functions</p></li><li><p>Memory efficient - processes values one at a time</p></li><li><p>@template T The type of values yielded by the iterator</p></li><li><p>@template TReturn The return type of the iterator</p></li><li><p>@template TNext The type of value that can be passed to next()</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create from an async generator</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncIteratorObject</span><span class="token punctuation">(</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4, 6</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectfromiterable-iterable-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectfromiterable-iterable-asynciteratorobject"><span><code>asynciteratorobject.from(iterable: Iterable): AsyncIteratorObject</code></span></a></h4><p>A wrapper class providing functional operations on async iterables. Enables lazy evaluation and chainable transformations on async data streams.</p><p>Key characteristics:</p><ul><li><p>Lazy evaluation - operations are not executed until iteration begins</p></li><li><p>Chainable - all transformation methods return new AsyncIteratorObject instances</p></li><li><p>Supports both sync and async transformation functions</p></li><li><p>Memory efficient - processes values one at a time</p></li><li><p>@template T The type of values yielded by the iterator</p></li><li><p>@template TReturn The return type of the iterator</p></li><li><p>@template TNext The type of value that can be passed to next()</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create from an async generator</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncIteratorObject</span><span class="token punctuation">(</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4, 6</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creates an AsyncIteratorObject from a synchronous iterable. Converts the sync iterable to async for uniform handling.</p><ul><li>@param iterable A synchronous iterable to convert</li><li>@returns A new AsyncIteratorObject wrapping the converted iterable</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> syncArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> asyncIterator <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>syncArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> asyncIterator<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3, 4, 5</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectmergeiterables-asynciterable-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectmergeiterables-asynciterable-asynciteratorobject"><span><code>asynciteratorobject.merge(...iterables: AsyncIterable[]): AsyncIteratorObject</code></span></a></h4><p>Merges multiple async iterables into a single stream. Values from all sources are interleaved as they become available. The merged iterator completes when all source iterators complete.</p><ul><li>@param iterables The async iterables to merge</li><li>@returns A new AsyncIteratorObject yielding values from all sources</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">source1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">source2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> merged <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">source1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">source2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> merged<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Order depends on timing: 1, 2, 3, 4 or similar</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectconstructoriterable-asynciterable" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectconstructoriterable-asynciterable"><span><code>asynciteratorobject.constructor(iterable: AsyncIterable)</code></span></a></h4><h4 id="asynciteratorobjectpipegeneratorfactory-signal-abortsignal-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectpipegeneratorfactory-signal-abortsignal-asynciteratorobject"><span><code>asynciteratorobject.pipe(generatorFactory, signal?: AbortSignal): AsyncIteratorObject</code></span></a></h4><p>Low-level transformation method using generator functions. Allows custom async transformations by providing a generator factory. Used internally by other transformation methods.</p><ul><li>@param generatorFactory A function that returns a generator function for transforming values</li><li>@param signal Optional AbortSignal to cancel the operation</li><li>@returns A new AsyncIteratorObject with transformed values</li></ul><h4 id="asynciteratorobjectmapcallbackfn-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectmapcallbackfn-asynciteratorobject"><span><code>asynciteratorobject.map(callbackfn): AsyncIteratorObject</code></span></a></h4><p>Transforms each value using a mapping function. The callback can be synchronous or return a promise.</p><ul><li>@param callbackfn Function to transform each value</li><li>@returns A new AsyncIteratorObject yielding transformed values</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> doubled<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 4, 6</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectfilterpredicate-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectfilterpredicate-asynciteratorobject"><span><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></span></a></h4><h4 id="asynciteratorobjectfilterpredicate-asynciteratorobject-1" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectfilterpredicate-asynciteratorobject-1"><span><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></span></a></h4><h4 id="asynciteratorobjectfilterpredicate-asynciteratorobject-2" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectfilterpredicate-asynciteratorobject-2"><span><code>asynciteratorobject.filter(predicate): AsyncIteratorObject</code></span></a></h4><p>Filters values based on a predicate function. Only values for which the predicate returns truthy are yielded. Supports type guard predicates for type narrowing.</p><ul><li>@param predicate Function to test each value</li><li>@returns A new AsyncIteratorObject yielding only values that pass the test</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> evens <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> evens<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 4</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjecttakelimit-number-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjecttakelimit-number-asynciteratorobject"><span><code>asynciteratorobject.take(limit: number): AsyncIteratorObject</code></span></a></h4><p>Creates an iterator whose values are the values from this iterator, stopping once the provided limit is reached.</p><ul><li>@param limit The maximum number of values to yield.</li></ul><h4 id="asynciteratorobjectdropcount-number-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectdropcount-number-asynciteratorobject"><span><code>asynciteratorobject.drop(count: number): AsyncIteratorObject</code></span></a></h4><p>Creates an iterator whose values are the values from this iterator after skipping the provided count.</p><ul><li>@param count The number of values to drop.</li></ul><h4 id="asynciteratorobjectflatmapcallback-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectflatmapcallback-asynciteratorobject"><span><code>asynciteratorobject.flatMap(callback): AsyncIteratorObject</code></span></a></h4><p>Creates an iterator whose values are the result of applying the callback to the values from this iterator and then flattening the resulting iterators or iterables.</p><ul><li>@param callback A function that accepts up to two arguments to be used to transform values from the underlying iterator into new iterators or iterables to be flattened into the result.</li></ul><h4 id="asynciteratorobjectreducecallbackfn-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectreducecallbackfn-asynciteratorobject"><span><code>asynciteratorobject.reduce(callbackfn): AsyncIteratorObject</code></span></a></h4><h4 id="asynciteratorobjectreducecallbackfn-initialvalue-r-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectreducecallbackfn-initialvalue-r-asynciteratorobject"><span><code>asynciteratorobject.reduce(callbackfn, initialValue: R): AsyncIteratorObject</code></span></a></h4><h4 id="asynciteratorobjectreducecallbackfn-args-unknown-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectreducecallbackfn-args-unknown-asynciteratorobject"><span><code>asynciteratorobject.reduce(callbackfn, ...args: unknown[]): AsyncIteratorObject</code></span></a></h4><p>Creates an iterator of accumulated values by applying a reducer function. Unlike Array.reduce, this returns an iterator that yields each intermediate accumulated value, not just the final result. This allows observing the accumulation process.</p><ul><li>@param callbackfn Reducer function to accumulate values</li><li>@param initialValue Optional initial value for the accumulation</li><li>@returns A new AsyncIteratorObject yielding accumulated values at each step</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sums <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> sums<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 3, 6, 10 (running totals)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectexpandcallbackfn-asynciteratorobject" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectexpandcallbackfn-asynciteratorobject"><span><code>asynciteratorobject.expand(callbackfn): AsyncIteratorObject</code></span></a></h4><p>Transforms each value into multiple values using an expander function. Each input value is expanded into zero or more output values. Similar to flatMap but for expanding to multiple values rather than flattening iterables.</p><ul><li>@param callbackfn Function that returns an iterable of values for each input</li><li>@returns A new AsyncIteratorObject yielding all expanded values</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> AsyncIteratorObject<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> expanded <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> x <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> expanded<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 10, 2, 20, 3, 30</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="asynciteratorobjectsymbolasynciterator" tabindex="-1"><a class="header-anchor" href="#asynciteratorobjectsymbolasynciterator"><span><code>asynciteratorobject.Symbol.asyncIterator()</code></span></a></h4><h3 id="sequence" tabindex="-1"><a class="header-anchor" href="#sequence"><span><code>Sequence</code></span></a></h3><p>A sequence is a FIFO (First-In-First-Out) queue for async consumption. Designed for single consumer with multiple producers pattern. Values are queued and consumed in order, with backpressure support.</p><p>Key characteristics:</p><ul><li><p>Single consumer - values are consumed once, in order</p></li><li><p>Multiple producers can push values concurrently</p></li><li><p>FIFO ordering - first value in is first value out</p></li><li><p>Backpressure control via reserve() method</p></li><li><p>Async iteration support for continuous consumption</p></li><li><p>@template T The type of values in the sequence.</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a sequence for processing tasks</span></span>
<span class="line"><span class="token keyword">const</span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Producer: Add tasks to the queue</span></span>
<span class="line"><span class="token function">tasks</span><span class="token punctuation">(</span><span class="token string">&#39;task1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">tasks</span><span class="token punctuation">(</span><span class="token string">&#39;task2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">tasks</span><span class="token punctuation">(</span><span class="token string">&#39;task3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Consumer: Process tasks in order</span></span>
<span class="line"><span class="token keyword">const</span> task1 <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;task1&#39;</span></span>
<span class="line"><span class="token keyword">const</span> task2 <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;task2&#39;</span></span>
<span class="line"><span class="token keyword">const</span> task3 <span class="token operator">=</span> <span class="token keyword">await</span> tasks<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;task3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sequencemergetarget-sequence-sequences-sequence-void" tabindex="-1"><a class="header-anchor" href="#sequencemergetarget-sequence-sequences-sequence-void"><span><code>sequence.merge(target: Sequence, ...sequences: Sequence[]): void</code></span></a></h4><p>Merges multiple source sequences into a target sequence. Values from all sources are forwarded to the target sequence. Each source is consumed independently and concurrently.</p><ul><li>@param target The sequence that will receive values from all sources</li><li>@param sequences The source sequences to merge from</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create target and source sequences</span></span>
<span class="line"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Merge sources into target</span></span>
<span class="line">Sequence<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Values from both sources appear in target</span></span>
<span class="line"><span class="token function">source1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">source2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">source1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Consumer gets values as they arrive</span></span>
<span class="line"><span class="token keyword">await</span> target<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Could be 1, 2, or 3 depending on timing</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sequenceconstructorprivate-readonly-abortsignal-abortsignal" tabindex="-1"><a class="header-anchor" href="#sequenceconstructorprivate-readonly-abortsignal-abortsignal"><span><code>sequence.constructor(private readonly abortSignal?: AbortSignal)</code></span></a></h4><h4 id="sequencesize-number" tabindex="-1"><a class="header-anchor" href="#sequencesize-number"><span><code>sequence.size(): number</code></span></a></h4><p>Returns the number of values currently queued.</p><ul><li>@returns The current queue size</li></ul><h4 id="sequencereservecapacity-number-promise" tabindex="-1"><a class="header-anchor" href="#sequencereservecapacity-number-promise"><span><code>sequence.reserve(capacity: number): Promise</code></span></a></h4><p>Waits until the queue size drops to or below the specified capacity. Useful for implementing backpressure - producers can wait before adding more items.</p><ul><li>@param capacity The maximum queue size to wait for</li><li>@returns A promise that resolves when the queue size is at or below capacity</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Producer with backpressure control</span></span>
<span class="line"><span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Wait if queue has more than 10 items</span></span>
<span class="line"><span class="token keyword">await</span> sequence<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token string">&#39;new item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Safe to add, queue has space</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sequencenext-promise" tabindex="-1"><a class="header-anchor" href="#sequencenext-promise"><span><code>sequence.next(): Promise</code></span></a></h4><p>Consumes and returns the next value from the queue. If the queue is empty, waits for a value to be added. Values are consumed in FIFO order.</p><ul><li>@returns A promise that resolves with the next value</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Consumer waits for values</span></span>
<span class="line"><span class="token keyword">const</span> valuePromise <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Producer adds value</span></span>
<span class="line"><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Consumer receives it</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> valuePromise<span class="token punctuation">;</span> <span class="token comment">// 42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="sequencesymboldispose-void" tabindex="-1"><a class="header-anchor" href="#sequencesymboldispose-void"><span><code>sequence.Symbol.dispose(): void</code></span></a></h4><p>Disposes of the sequence, signaling any waiting consumers. Called automatically when used with <code>using</code> declaration.</p><h3 id="signal" tabindex="-1"><a class="header-anchor" href="#signal"><span><code>Signal</code></span></a></h3><p>A signal is a broadcast async primitive for coordinating between producers and consumers. When a value is sent, ALL waiting consumers receive the same value (broadcast pattern). Signals can be reused - each call to next() creates a new promise for the next value.</p><p>Key characteristics:</p><ul><li><p>Multiple consumers can wait simultaneously</p></li><li><p>All waiting consumers receive the same value when sent</p></li><li><p>Reusable - can send multiple values over time</p></li><li><p>Supports async iteration for continuous value streaming</p></li><li><p>@template T The type of value that this signal carries.</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a signal for string values</span></span>
<span class="line"><span class="token keyword">const</span> signal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple consumers wait for the same value</span></span>
<span class="line"><span class="token keyword">const</span> promise1 <span class="token operator">=</span> signal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> promise2 <span class="token operator">=</span> signal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Send a value - both consumers receive it</span></span>
<span class="line"><span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">[</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise1<span class="token punctuation">,</span> promise2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value1 <span class="token operator">===</span> value2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true - both got &#39;Hello World&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signalmergetarget-signal-signals-signal-void" tabindex="-1"><a class="header-anchor" href="#signalmergetarget-signal-signals-signal-void"><span><code>signal.merge(target: Signal, ...signals: Signal[]): void</code></span></a></h4><p>Merges multiple source signals into a target signal. Values from any source signal are forwarded to the target signal. The merge continues until the target signal is aborted.</p><ul><li>@param target The signal that will receive values from all sources</li><li>@param signals The source signals to merge from</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a target signal and source signals</span></span>
<span class="line"><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Merge sources into target</span></span>
<span class="line">Signal<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Values from any source appear in target</span></span>
<span class="line"><span class="token function">source1</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> target<span class="token punctuation">;</span> <span class="token comment">// &#39;Hello&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signalconstructorprivate-readonly-abortsignal-abortsignal" tabindex="-1"><a class="header-anchor" href="#signalconstructorprivate-readonly-abortsignal-abortsignal"><span><code>signal.constructor(private readonly abortSignal?: AbortSignal)</code></span></a></h4><p>Creates a new Signal instance.</p><ul><li>@param abortSignal An optional AbortSignal that can be used to cancel the signal operation.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a signal with abort capability</span></span>
<span class="line"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> signal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span>signal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Signal can be cancelled</span></span>
<span class="line">controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token string">&#39;Operation cancelled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signalaborted-boolean" tabindex="-1"><a class="header-anchor" href="#signalaborted-boolean"><span><code>signal.aborted(): boolean</code></span></a></h4><h4 id="signalnext-promise" tabindex="-1"><a class="header-anchor" href="#signalnext-promise"><span><code>signal.next(): Promise</code></span></a></h4><p>Waits for the next value to be sent to this signal. If the signal has been aborted, this method will reject with the abort reason.</p><ul><li>@returns A promise that resolves with the next value sent to the signal.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> signal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Wait for a value</span></span>
<span class="line"><span class="token keyword">const</span> valuePromise <span class="token operator">=</span> signal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Send a value from elsewhere</span></span>
<span class="line"><span class="token function">signal</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">await</span> valuePromise<span class="token punctuation">;</span> <span class="token comment">// &#39;Hello&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="signalsymboldispose-void" tabindex="-1"><a class="header-anchor" href="#signalsymboldispose-void"><span><code>signal.Symbol.dispose(): void</code></span></a></h4><p>Disposes of the signal, cleaning up any pending promise resolvers. This method is called automatically when the signal is used with a <code>using</code> declaration.</p><h3 id="iterateargs-number-iterable" tabindex="-1"><a class="header-anchor" href="#iterateargs-number-iterable"><span><code>iterate(...args: number[]): Iterable</code></span></a></h3><p>Creates an iterable sequence of numbers with flexible parameters. Can generate infinite sequences, finite sequences, or sequences with custom start and step values.</p><ul><li><p>@param args Variable arguments to configure the sequence:</p><ul><li>No args: Infinite sequence starting at 0 with step 1</li><li>1 arg (count): Sequence from 0 to count-1</li><li>2 args (start, count): Sequence starting at &#39;start&#39; for &#39;count&#39; iterations</li><li>3 args (start, count, step): Custom start, count, and step value</li></ul></li><li><p>@returns An iterable that generates numbers according to the parameters</p></li><li><p>@example</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Infinite sequence: 0, 1, 2, 3, ...</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Count only: 0, 1, 2, 3, 4</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Start and count: 10, 11, 12, 13, 14</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Start, count, and step: 0, 2, 4, 6, 8</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> n <span class="token keyword">of</span> <span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toasynciterableiterable-iterable-asynciterable" tabindex="-1"><a class="header-anchor" href="#toasynciterableiterable-iterable-asynciterable"><span><code>toAsyncIterable(iterable: Iterable): AsyncIterable</code></span></a></h3><p>Converts a synchronous iterable to an asynchronous iterable. Wraps the sync iterator methods to return promises, enabling uniform async handling.</p><ul><li><p>@template T The type of values yielded by the iterator</p></li><li><p>@template TReturn The return type of the iterator</p></li><li><p>@template TNext The type of value that can be passed to next()</p></li><li><p>@param iterable A synchronous iterable to convert</p></li><li><p>@returns An async iterable that yields the same values as the input</p></li><li><p>@example</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> syncArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> asyncIterable <span class="token operator">=</span> <span class="token function">toAsyncIterable</span><span class="token punctuation">(</span>syncArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> asyncIterable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2, 3, 4, 5</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h2><h3 id="event-multi-listener-pattern" tabindex="-1"><a class="header-anchor" href="#event-multi-listener-pattern"><span>Event - Multi-Listener Pattern</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;evnty&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a typed event</span></span>
<span class="line"><span class="token keyword">const</span> userEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple listeners</span></span>
<span class="line">userEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Logger:&#39;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> <span class="token function">updateUI</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">userEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> <span class="token function">saveToCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Emit - all listeners are called</span></span>
<span class="line"><span class="token function">userEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Functional transformations</span></span>
<span class="line"><span class="token keyword">const</span> adminEvent <span class="token operator">=</span> userEvent</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">id</span> <span class="token generic class-name"><span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>user<span class="token punctuation">,</span> role<span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Async iteration</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> user <span class="token keyword">of</span> userEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;User event:&#39;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="signal-async-coordination" tabindex="-1"><a class="header-anchor" href="#signal-async-coordination"><span>Signal - Async Coordination</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Signal <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;evnty&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Coordinate multiple async operations</span></span>
<span class="line"><span class="token keyword">const</span> dataSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span>Buffer<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple operations wait for the same data</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> dataSignal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Process data in way A</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">processB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> dataSignal<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Process data in way B</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Start both processors</span></span>
<span class="line"><span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">processA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">processB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Both receive the same data when it arrives</span></span>
<span class="line"><span class="token function">dataSignal</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;shared data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sequence-task-queue" tabindex="-1"><a class="header-anchor" href="#sequence-task-queue"><span>Sequence - Task Queue</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sequence <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;evnty&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a task queue</span></span>
<span class="line"><span class="token keyword">const</span> taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Single consumer processes tasks in order</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> task <span class="token keyword">of</span> taskQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Task completed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Multiple producers add tasks</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">processData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">saveResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Backpressure control</span></span>
<span class="line"><span class="token keyword">await</span> taskQueue<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Wait until queue has â‰¤10 items</span></span>
<span class="line"><span class="token function">taskQueue</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">nonUrgentTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="combining-primitives" tabindex="-1"><a class="header-anchor" href="#combining-primitives"><span>Combining Primitives</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Event + Signal for request/response pattern</span></span>
<span class="line"><span class="token keyword">const</span> requestEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> responseSignal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Signal<span class="token operator">&lt;</span>Response<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">requestEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">responseSignal</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Event + Sequence for buffered processing</span></span>
<span class="line"><span class="token keyword">const</span> dataEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> processQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sequence<span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">dataEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token function">processQueue</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Process with controlled concurrency</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> data <span class="token keyword">of</span> processQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">await</span> <span class="token function">processWithRateLimit</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h2><p>License <a href="./LICENSE">The MIT License</a> Copyright (c) 2025 Ivan Zakharchanka</p>`,231)])])}const r=s(o,[["render",c]]),u=JSON.parse('{"path":"/","title":"Evnty","lang":"en-US","frontmatter":{},"git":{"updatedTime":1755904963000,"contributors":[{"name":"Ivan Zakharchanka","username":"","email":"3axap4eHko@gmail.com","commits":30},{"name":"3axap4eHko","username":"3axap4eHko","email":"3axap4eHko@gmail.com","commits":4,"url":"https://github.com/3axap4eHko"}],"changelog":[{"hash":"e0e4f92e1133a7124a24b0632887c385e00e362d","time":1755904963000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"V5 (#10)"},{"hash":"fba720b972f6a3770cecbbd8c276102ca3bcda80","time":1746712308000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"implements signal and sequence"},{"hash":"430f886ae571b5242ac1781dd7df2e9db6c55264","time":1733116432000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"updates docs"},{"hash":"bf93c749c1bd395676b3c740a0d74282fef1613e","time":1730648651000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"addse settle method for the event"},{"hash":"acb09a1b018015c4150e01b1bc32ccbee733f6fb","time":1725230108000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"improves queue interface"},{"hash":"b625109db850f55b9d8ee45293c87952579d5c14","time":1721411939000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"updates readme"},{"hash":"968ec9a7a634d76abd81c8d12091ae5dfb891216","time":1721411760000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds a logo"},{"hash":"708b44eef688333b5db45649b620131c35a337ff","time":1721346756000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"docs fix"},{"hash":"427bc90703fbaba4cfb756a49e2e33b6830f6dc2","time":1721329237000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"docs fix"},{"hash":"232b6d70ab3ff80e50a6be3f41f46511716cc075","time":1721328540000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"v2"},{"hash":"f52d39d128eca3f81bc77671755e126a9057cdd4","time":1713672781000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"implements new methods: orchastrate, batch, queue and generator"},{"hash":"986de9c3240d11b7342f926aba5a81a0ad137fdd","time":1696024378000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"update readme"},{"hash":"b44ed4393d7f95ff9e1908aa6985773bc3d49b5e","time":1696010975000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"v2"},{"hash":"e6fabf845f564409ef3d4b04cacd0edbe02f1314","time":1694351250000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"update README"},{"hash":"ed2676ff5053a55098a77957ec472541922d0cf4","time":1694316463000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds node.js logo"},{"hash":"acff9b40f039aba51f5a625e5352a5293355c4dc","time":1694314722000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds method first to Event class"},{"hash":"b28af53b469611e6c77cf4b5d64e4f36b9d83b2c","time":1693861496000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"test fix"},{"hash":"8e130e4ac9c8f63e3512f2538c9b8056a413f8f6","time":1691549962000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"upgrade: prettier"},{"hash":"59e39c5c50f6013b3febf1ee5fd5cb6f50c75b54","time":1679440483000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"support ESM and CommonJS"},{"hash":"2aa0e07a33e5cf133e75e8f19b33c21fa36a27fd","time":1679179551000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"Added dismiss condition"},{"hash":"99f0a27d4423a437f3c7490db0ad1c57353ea54c","time":1667322834000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"upgrade"},{"hash":"09e527e20ef84500241d414392f3929a67d43b4a","time":1650941875000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"dismiss command"},{"hash":"104f8eaf6db802df46702727435fa7be50c28949","time":1650606947000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"Improved typing"},{"hash":"b8520099d6a1bf1e4062a3114b60770d5f125bbf","time":1613969485000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"updates"},{"hash":"87dc7d8ab5042885c4c97e0984fce7d1fe063256","time":1613968324000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"type fix"},{"hash":"5ee986fda4dcbfb068abd9ab90b30303a1c25d91","time":1585260833000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"README updates"},{"hash":"cbb380fee4ed6da744a30668af39e53611b5c4d1","time":1572273218000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"readme update"},{"hash":"272af681f12ff42409f939c55d6109094de3f386","time":1570899902000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"map and reduce"},{"hash":"4bf5355a1ba5ae2a62443285cc33b3353db4c40f","time":1570568757000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"event merging and filtering"},{"hash":"dc0ee2a98e7fe098b4b1b4837b3592f0e894ad71","time":1563221914000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"ts implementation"},{"hash":"ff23f123b697644abd515b1cb68220b31f8a25b5","time":1562597488000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"codecov badge update"},{"hash":"c1de7dbcfcef9460b2a7017912821d6dd03133b6","time":1562596403000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"rename"},{"hash":"9c1503f7ab2236813fdf728f9dbfa0d284e75c2d","time":1562596028000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"added test cases"},{"hash":"1d004143927e8dc3595482aa06f83d9f699dfbfc","time":1562595679000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":":bowtie:"}]},"filePathRelative":"index.md"}');export{r as comp,u as data};
