import{_ as s,c as a,a as e,o as t}from"./app-COPG70bs.js";const p="data:image/svg+xml,%3csvg%20width='256'%20height='256'%20viewBox='0%200%20256%20256'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M139.511%20210L125.511%20196.182L193.148%20128.545L125.511%2061.0909L139.511%2047.0909L220.966%20128.545L139.511%20210ZM33.875%20160.182V140.182H195.875L175.875%20160.182H33.875ZM33.875%20116.909V96.9091H175.875L195.875%20116.909H33.875Z'%20fill='%238888FF'/%3e%3c/svg%3e",o={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[e('<h1 id="evnty" tabindex="-1"><a class="header-anchor" href="#evnty"><span>Evnty</span></a></h1><p><a href="https://codecov.io/gh/3axap4eHko/evnty" target="_blank" rel="noopener noreferrer"><img src="https://codecov.io/gh/3axap4eHko/evnty/branch/master/graph/badge.svg?maxAge=43200" alt="Coverage Status"></a><a href="https://github.com/3axap4eHko/evnty/actions" target="_blank" rel="noopener noreferrer"><img src="https://github.com/3axap4eHko/evnty/workflows/Build Package/badge.svg?branch=master" alt="Github Build Status"></a><a href="https://www.npmjs.com/package/evnty" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/v/evnty.svg?maxAge=43200" alt="NPM version"></a><a href="https://www.npmjs.com/package/evnty" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dw/evnty.svg?maxAge=43200" alt="Downloads"></a><a href="https://snyk.io/test/npm/evnty/latest" target="_blank" rel="noopener noreferrer"><img src="https://snyk.io/test/github/3axap4eHko/evnty/badge.svg?maxAge=43200" alt="Snyk"></a></p><p>0-dependency, high-performance, reactive event handling library optimized for both browser and Node.js environments. This library introduces a robust and type-safe abstraction for handling events, reducing boilerplate and increasing code maintainability.</p><div align="center"><a href="https://github.com/3axap4ehko/evnty"><img width="200" height="200" src="'+p+`"></a><br><br></div><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of Contents</span></a></h2><ul><li><p><a href="#motivation">Motivation</a></p></li><li><p><a href="#features">Features</a></p></li><li><p><a href="#platform-support">Platform Support</a></p></li><li><p><a href="#installing">Installing</a></p></li><li><p><a href="#api">API</a></p></li><li><p><a href="#signal"><code>Signal</code></a></p><ul><li><a href="#signalconstructorprivate-readonly-abortsignal-abortsignal"><code>signal.constructor(private readonly abortSignal?: AbortSignal)</code></a></li><li><a href="#signalsymboltostringtag-string"><code>signal.Symbol.toStringTag(): string</code></a></li><li><a href="#signalpromise-promise"><code>signal.promise(): Promise</code></a></li><li><a href="#signalnext"><code>signal.next()</code></a></li><li><a href="#signalcatchonrejected-promise"><code>signal.catch(onrejected): Promise</code></a></li><li><a href="#signalfinallyonfinally-promise"><code>signal.finally(onfinally): Promise</code></a></li><li><a href="#signalthenonfulfilled-onrejected-promise"><code>signal.then(onfulfilled, onrejected): Promise</code></a></li><li><a href="#signalsymbolasynciterator-asynciterator"><code>signal.Symbol.asyncIterator(): AsyncIterator</code></a></li></ul></li><li><p><a href="#sequence"><code>Sequence</code></a></p><ul><li><a href="#sequenceconstructorprivate-readonly-abortsignal-abortsignal"><code>sequence.constructor(private readonly abortSignal?: AbortSignal)</code></a></li><li><a href="#sequencesymboltostringtag-string"><code>sequence.Symbol.toStringTag(): string</code></a></li><li><a href="#sequencepromise-promise"><code>sequence.promise(): Promise</code></a></li><li><a href="#sequencenext-promise"><code>sequence.next(): Promise</code></a></li><li><a href="#sequencecatchonrejected-promise"><code>sequence.catch(onrejected): Promise</code></a></li><li><a href="#sequencefinallyonfinally-promise"><code>sequence.finally(onfinally): Promise</code></a></li><li><a href="#sequencethenonfulfilled-onrejected-promise"><code>sequence.then(onfulfilled, onrejected): Promise</code></a></li><li><a href="#sequencesymbolasynciterator-asynciterator"><code>sequence.Symbol.asyncIterator(): AsyncIterator</code></a></li></ul></li><li><p><a href="#event"><code>Event</code></a></p><ul><li><a href="#eventconstructordispose-callback"><code>event.constructor(dispose?: Callback)</code></a></li><li><a href="#eventerror-event"><code>event.error(): Event</code></a></li><li><a href="#eventsize-number"><code>event.size(): number</code></a></li><li><a href="#eventdisposed-boolean"><code>event.disposed(): boolean</code></a></li><li><a href="#eventlackslistener-listener-boolean"><code>event.lacks(listener: Listener): boolean</code></a></li><li><a href="#eventhaslistener-listener-boolean"><code>event.has(listener: Listener): boolean</code></a></li><li><a href="#eventofflistener-listener-this"><code>event.off(listener: Listener): this</code></a></li><li><a href="#eventonlistener-listener-unsubscribe"><code>event.on(listener: Listener): Unsubscribe</code></a></li><li><a href="#eventoncelistener-listener-unsubscribe"><code>event.once(listener: Listener): Unsubscribe</code></a></li><li><a href="#eventclear-this"><code>event.clear(): this</code></a></li><li><a href="#eventthenonfulfilled-onrejected-promise"><code>event.then(onfulfilled, onrejected): Promise</code></a></li><li><a href="#eventsettle-promise"><code>event.settle(): Promise</code></a></li><li><a href="#eventpromise-promise"><code>event.promise(): Promise</code></a></li><li><a href="#eventsymbolasynciterator-asynciterator"><code>event.Symbol.asyncIterator(): AsyncIterator</code></a></li><li><a href="#eventpipegenerator-event"><code>event.pipe(generator): Event</code></a></li><li><a href="#eventgeneratorgenerator-asyncgenerator"><code>event.generator(generator): AsyncGenerator</code></a></li><li><a href="#eventfilterpredicate-predicate-event"><code>event.filter(predicate: Predicate): Event</code></a></li><li><a href="#eventfilterfilter-filterfunction-event"><code>event.filter(filter: FilterFunction): Event</code></a></li><li><a href="#eventfilterfilter-filter-event"><code>event.filter(filter: Filter): Event</code></a></li><li><a href="#eventfirstpredicate-predicate-event"><code>event.first(predicate: Predicate): Event</code></a></li><li><a href="#eventfirstfilter-filterfunction-event"><code>event.first(filter: FilterFunction): Event</code></a></li><li><a href="#eventfirstfilter-filter-event"><code>event.first(filter: Filter): Event</code></a></li><li><a href="#eventmapmapper-mapper-event"><code>event.map(mapper: Mapper): Event</code></a></li><li><a href="#eventreducereducer-reducer-init-a-event"><code>event.reduce(reducer: Reducer, init?: A): Event</code></a></li><li><a href="#eventreducereducer-reducer-init-unknown-event"><code>event.reduce(reducer: Reducer, ...init: unknown[]): Event</code></a></li><li><a href="#eventexpandexpander-expander-event"><code>event.expand(expander: Expander): Event</code></a></li><li><a href="#eventorchestrateconductor-event-event"><code>event.orchestrate(conductor: Event): Event</code></a></li><li><a href="#eventdebounceinterval-number-event"><code>event.debounce(interval: number): Event</code></a></li><li><a href="#eventthrottleinterval-number-event"><code>event.throttle(interval: number): Event</code></a></li><li><a href="#eventbatchinterval-number-size-number-event"><code>event.batch(interval: number, size?: number): Event</code></a></li><li><a href="#eventqueue-queue"><code>event.queue(): Queue</code></a></li></ul></li><li><p><a href="#mergeevents-events-event"><code>merge(...events: Events): Event</code></a></p></li><li><p><a href="#createintervalinterval-number-event"><code>createInterval(interval: number): Event</code></a></p></li><li><p><a href="#createevent-event"><code>createEvent(): Event</code></a></p></li><li><p><a href="#examples">Examples</a></p></li><li><p><a href="#migration">Migration</a></p></li><li><p><a href="#license">License</a></p></li></ul><h2 id="motivation" tabindex="-1"><a class="header-anchor" href="#motivation"><span>Motivation</span></a></h2><p>In traditional event handling in TypeScript, events are often represented as strings, and there&#39;s no easy way to apply functional transformations like filtering or mapping directly on the event data. This approach lacks type safety, and chaining operations require additional boilerplate, making the code verbose and less maintainable.</p><p>The proposed library introduces a robust <code>Event</code> abstraction that encapsulates event data and provides a suite of functional methods like <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>debounce</code>, etc., allowing for a more declarative and type-safe approach to event handling. This design facilitates method chaining and composition, making the code more readable and maintainable. For instance, it allows developers to create new events by transforming or filtering existing ones, thus promoting code reusability and modularity.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li>Modern: Supports Promises and module systems ESM and CommonJS</li><li>Zero Dependencies: Utilizes native features for optimal performance.</li><li>Full TypeScript Support: Ensures type safety and improves developer experience.</li><li>Functional Programming Techniques: Offers map, filter, reduce, expand, and more for event handling.</li><li>Flexible Environment Support: Works seamlessly in both the browser and Node.js, including service workers.</li><li>Performance Optimized: Competes with and exceeds other well-known libraries like EventEmitter3 and EventEmitter2 in performance benchmarks.</li></ul><h2 id="platform-support" tabindex="-1"><a class="header-anchor" href="#platform-support"><span>Platform Support</span></a></h2><table><thead><tr><th><img src="https://raw.github.com/alrra/browser-logos/main/src/node.js/node.js_48x48.png?1" alt="NodeJS"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png?1" alt="Chrome"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png?1" alt="Firefox"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/safari/safari_48x48.png?1" alt="Safari"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/opera/opera_48x48.png?1" alt="Opera"></th><th><img src="https://raw.github.com/alrra/browser-logos/main/src/edge/edge_48x48.png?1" alt="Edge"></th></tr></thead><tbody><tr><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td><td>Latest ✔</td></tr></tbody></table><h2 id="installing" tabindex="-1"><a class="header-anchor" href="#installing"><span>Installing</span></a></h2><p>Using pnpm:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using yarn:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">yarn</span> <span class="token function">add</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Using npm:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> evnty</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h2><h3 id="signal" tabindex="-1"><a class="header-anchor" href="#signal"><span><code>Signal</code></span></a></h3><p>Signal is a callable construct for sending and receiving a single asynchronous value. It implements both Promise and AsyncIterable, allowing it to be awaited once or iterated over with <code>for await...of</code>. Once signaled, it resolves the pending promise.</p><ul><li>@template T - The type of value the signal carries.</li><li>@param abortSignal - Optional AbortSignal used to abort waiting and reject the promise.</li></ul><h4 id="signalconstructorprivate-readonly-abortsignal-abortsignal" tabindex="-1"><a class="header-anchor" href="#signalconstructorprivate-readonly-abortsignal-abortsignal"><span><code>signal.constructor(private readonly abortSignal?: AbortSignal)</code></span></a></h4><h4 id="signalsymboltostringtag-string" tabindex="-1"><a class="header-anchor" href="#signalsymboltostringtag-string"><span><code>signal.Symbol.toStringTag(): string</code></span></a></h4><h4 id="signalpromise-promise" tabindex="-1"><a class="header-anchor" href="#signalpromise-promise"><span><code>signal.promise(): Promise</code></span></a></h4><p>Returns the internal promise that resolves with the signaled value.</p><h4 id="signalnext" tabindex="-1"><a class="header-anchor" href="#signalnext"><span><code>signal.next()</code></span></a></h4><p>Waits for the next signal value or rejects if aborted.</p><ul><li>@returns A promise resolving to the value of type T.</li></ul><h4 id="signalcatchonrejected-promise" tabindex="-1"><a class="header-anchor" href="#signalcatchonrejected-promise"><span><code>signal.catch(onrejected): Promise</code></span></a></h4><h4 id="signalfinallyonfinally-promise" tabindex="-1"><a class="header-anchor" href="#signalfinallyonfinally-promise"><span><code>signal.finally(onfinally): Promise</code></span></a></h4><h4 id="signalthenonfulfilled-onrejected-promise" tabindex="-1"><a class="header-anchor" href="#signalthenonfulfilled-onrejected-promise"><span><code>signal.then(onfulfilled, onrejected): Promise</code></span></a></h4><h4 id="signalsymbolasynciterator-asynciterator" tabindex="-1"><a class="header-anchor" href="#signalsymbolasynciterator-asynciterator"><span><code>signal.Symbol.asyncIterator(): AsyncIterator</code></span></a></h4><h3 id="sequence" tabindex="-1"><a class="header-anchor" href="#sequence"><span><code>Sequence</code></span></a></h3><p>Sequence is a callable construct for buffering and emitting multiple values in order. It implements both Promise and AsyncIterable, allowing sequential consumption of values. Values pushed before consumption are queued, and consumers await <code>next()</code> or iterate via <code>for await...of</code>.</p><ul><li>@template T - The type of values buffered in the sequence.</li><li>@param abortSignal - Optional AbortSignal to abort iteration and resolve pending next calls.</li></ul><h4 id="sequenceconstructorprivate-readonly-abortsignal-abortsignal" tabindex="-1"><a class="header-anchor" href="#sequenceconstructorprivate-readonly-abortsignal-abortsignal"><span><code>sequence.constructor(private readonly abortSignal?: AbortSignal)</code></span></a></h4><h4 id="sequencesymboltostringtag-string" tabindex="-1"><a class="header-anchor" href="#sequencesymboltostringtag-string"><span><code>sequence.Symbol.toStringTag(): string</code></span></a></h4><h4 id="sequencepromise-promise" tabindex="-1"><a class="header-anchor" href="#sequencepromise-promise"><span><code>sequence.promise(): Promise</code></span></a></h4><h4 id="sequencenext-promise" tabindex="-1"><a class="header-anchor" href="#sequencenext-promise"><span><code>sequence.next(): Promise</code></span></a></h4><h4 id="sequencecatchonrejected-promise" tabindex="-1"><a class="header-anchor" href="#sequencecatchonrejected-promise"><span><code>sequence.catch(onrejected): Promise</code></span></a></h4><h4 id="sequencefinallyonfinally-promise" tabindex="-1"><a class="header-anchor" href="#sequencefinallyonfinally-promise"><span><code>sequence.finally(onfinally): Promise</code></span></a></h4><h4 id="sequencethenonfulfilled-onrejected-promise" tabindex="-1"><a class="header-anchor" href="#sequencethenonfulfilled-onrejected-promise"><span><code>sequence.then(onfulfilled, onrejected): Promise</code></span></a></h4><h4 id="sequencesymbolasynciterator-asynciterator" tabindex="-1"><a class="header-anchor" href="#sequencesymbolasynciterator-asynciterator"><span><code>sequence.Symbol.asyncIterator(): AsyncIterator</code></span></a></h4><h3 id="event" tabindex="-1"><a class="header-anchor" href="#event"><span><code>Event</code></span></a></h3><p>A class representing an anonymous event that can be listened to or triggered.</p><ul><li>@template T - The event type.</li><li>@template R - The return type of the event.</li></ul><h4 id="eventconstructordispose-callback" tabindex="-1"><a class="header-anchor" href="#eventconstructordispose-callback"><span><code>event.constructor(dispose?: Callback)</code></span></a></h4><p>Creates a new event.</p><ul><li>@param dispose - A function to call on the event disposal.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a click event.</span></span>
<span class="line"><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token punctuation">[</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">clickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Clicked at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventerror-event" tabindex="-1"><a class="header-anchor" href="#eventerror-event"><span><code>event.error(): Event</code></span></a></h4><p>Error event that emits errors.</p><ul><li>@returns <code>{Event&lt;unknown&gt;}</code> The error event.</li></ul><h4 id="eventsize-number" tabindex="-1"><a class="header-anchor" href="#eventsize-number"><span><code>event.size(): number</code></span></a></h4><p>The number of listeners for the event.</p><ul><li>@readonly</li><li>@type <code>{number}</code></li></ul><h4 id="eventdisposed-boolean" tabindex="-1"><a class="header-anchor" href="#eventdisposed-boolean"><span><code>event.disposed(): boolean</code></span></a></h4><p>Checks if the event has been disposed.</p><ul><li>@returns <code>{boolean}</code> <code>true</code> if the event has been disposed; otherwise, <code>false</code>.</li></ul><h4 id="eventlackslistener-listener-boolean" tabindex="-1"><a class="header-anchor" href="#eventlackslistener-listener-boolean"><span><code>event.lacks(listener: Listener): boolean</code></span></a></h4><p>Checks if the given listener is NOT registered for this event.</p><ul><li>@param listener - The listener function to check against the registered listeners.</li><li>@returns <code>true</code> if the listener is not already registered; otherwise, <code>false</code>.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Check if a listener is not already added</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">lacks</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventhaslistener-listener-boolean" tabindex="-1"><a class="header-anchor" href="#eventhaslistener-listener-boolean"><span><code>event.has(listener: Listener): boolean</code></span></a></h4><p>Checks if the given listener is registered for this event.</p><ul><li>@param listener - The listener function to check.</li><li>@returns <code>true</code> if the listener is currently registered; otherwise, <code>false</code>.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Verify if a listener is registered</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Listener is already registered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventofflistener-listener-this" tabindex="-1"><a class="header-anchor" href="#eventofflistener-listener-this"><span><code>event.off(listener: Listener): this</code></span></a></h4><p>Removes a specific listener from this event.</p><ul><li>@param listener - The listener to remove.</li><li>@returns The event instance, allowing for method chaining.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Remove a listener</span></span>
<span class="line">event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>myListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventonlistener-listener-unsubscribe" tabindex="-1"><a class="header-anchor" href="#eventonlistener-listener-unsubscribe"><span><code>event.on(listener: Listener): Unsubscribe</code></span></a></h4><p>Registers a listener that gets triggered whenever the event is emitted. This is the primary method for adding event handlers that will react to the event being triggered.</p><ul><li>@param listener - The function to call when the event occurs.</li><li>@returns An object that can be used to unsubscribe the listener, ensuring easy cleanup.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Add a listener to an event</span></span>
<span class="line"><span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event data:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventoncelistener-listener-unsubscribe" tabindex="-1"><a class="header-anchor" href="#eventoncelistener-listener-unsubscribe"><span><code>event.once(listener: Listener): Unsubscribe</code></span></a></h4><p>Adds a listener that will be called only once the next time the event is emitted. This method is useful for one-time notifications or single-trigger scenarios.</p><ul><li>@param listener - The listener to trigger once.</li><li>@returns An object that can be used to remove the listener if the event has not yet occurred.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Register a one-time listener</span></span>
<span class="line"><span class="token keyword">const</span> onceUnsubscribe <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received data once:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventclear-this" tabindex="-1"><a class="header-anchor" href="#eventclear-this"><span><code>event.clear(): this</code></span></a></h4><p>Removes all listeners from the event, effectively resetting it. This is useful when you need to cleanly dispose of all event handlers to prevent memory leaks or unwanted triggers after certain conditions.</p><ul><li>@returns <code>{this}</code> The instance of the event, allowing for method chaining.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myEvent<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Clears all listeners</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventthenonfulfilled-onrejected-promise" tabindex="-1"><a class="header-anchor" href="#eventthenonfulfilled-onrejected-promise"><span><code>event.then(onfulfilled, onrejected): Promise</code></span></a></h4><p>Enables the <code>Event</code> to be used in a Promise chain, resolving with the first emitted value.</p><ul><li>@template OK - The type of the fulfilled value returned by <code>onfulfilled</code> (defaults to the event&#39;s type).</li><li>@template ERR - The type of the rejected value returned by <code>onrejected</code> (defaults to <code>never</code>).</li><li>@param onfulfilled - A function called when the event emits its first value.</li><li>@param onrejected - A function called if an error occurs before the event emits.</li><li>@returns A Promise that resolves with the result of <code>onfulfilled</code> or <code>onrejected</code>.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> clickEvent<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventsettle-promise" tabindex="-1"><a class="header-anchor" href="#eventsettle-promise"><span><code>event.settle(): Promise</code></span></a></h4><p>Waits for the event to settle, returning a <code>PromiseSettledResult</code>.</p><ul><li><p>@returns <code>{Promise&lt;PromiseSettledResult&lt;T&gt;&gt;}</code> A promise that resolves with the settled result.</p></li><li><p>@example</p></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> event<span class="token punctuation">.</span><span class="token function">settle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event fulfilled with value:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Event rejected with reason:&#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventpromise-promise" tabindex="-1"><a class="header-anchor" href="#eventpromise-promise"><span><code>event.promise(): Promise</code></span></a></h4><p>A promise that resolves with the first emitted value from this event.</p><ul><li>@returns <code>{Promise&lt;T&gt;}</code> The promise value.</li></ul><h4 id="eventsymbolasynciterator-asynciterator" tabindex="-1"><a class="header-anchor" href="#eventsymbolasynciterator-asynciterator"><span><code>event.Symbol.asyncIterator(): AsyncIterator</code></span></a></h4><p>Makes this event iterable using <code>for await...of</code> loops.</p><ul><li>@returns An async iterator that yields values as they are emitted by this event.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Assuming an event that emits numbers</span></span>
<span class="line"><span class="token keyword">const</span> numberEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> numberEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Number:&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventpipegenerator-event" tabindex="-1"><a class="header-anchor" href="#eventpipegenerator-event"><span><code>event.pipe(generator): Event</code></span></a></h4><p>Transforms the event&#39;s values using a generator function, creating a new <code>Event</code> that emits the transformed values.</p><ul><li>@template PT - The type of values emitted by the transformed <code>Event</code>.</li><li>@template PR - The return type of the listeners of the transformed <code>Event</code>.</li><li>@param generator - A function that takes the original event&#39;s value and returns a generator (sync or async) that yields the transformed values.</li><li>@returns A new <code>Event</code> instance that emits the transformed values.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbersEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> evenNumbersEvent <span class="token operator">=</span> numbersEvent<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">yield</span> value<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">evenNumbersEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>evenNumber<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventgeneratorgenerator-asyncgenerator" tabindex="-1"><a class="header-anchor" href="#eventgeneratorgenerator-asyncgenerator"><span><code>event.generator(generator): AsyncGenerator</code></span></a></h4><p>Creates an async generator that yields values as they are emitted by this event.</p><ul><li>@template PT - The type of values yielded by the async generator.</li><li>@param generator - An optional function that takes the original event&#39;s value and returns a generator (sync or async) that yields values to include in the async generator.</li><li>@returns An async generator that yields values from this event as they occur.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> numbersEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> evenNumbersEvent <span class="token operator">=</span> numbersEvent<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">yield</span> value<span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">evenNumbersEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>evenNumber<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evenNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numbersEvent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventfilterpredicate-predicate-event" tabindex="-1"><a class="header-anchor" href="#eventfilterpredicate-predicate-event"><span><code>event.filter(predicate: Predicate): Event</code></span></a></h4><h4 id="eventfilterfilter-filterfunction-event" tabindex="-1"><a class="header-anchor" href="#eventfilterfilter-filterfunction-event"><span><code>event.filter(filter: FilterFunction): Event</code></span></a></h4><h4 id="eventfilterfilter-filter-event" tabindex="-1"><a class="header-anchor" href="#eventfilterfilter-filter-event"><span><code>event.filter(filter: Filter): Event</code></span></a></h4><p>Filters events, creating a new event that only triggers when the provided filter function returns <code>true</code>. This method can be used to selectively process events that meet certain criteria.</p><ul><li>@param <code>{Filter&lt;T, P&gt;}</code> predicate The filter function or predicate to apply to each event.</li><li>@returns <code>{Event&lt;P, R&gt;}</code> A new event that only triggers for filtered events.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> keyPressedEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> enterPressedEvent <span class="token operator">=</span> keyPressedEvent<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key <span class="token operator">=&gt;</span> key <span class="token operator">===</span> <span class="token string">&#39;Enter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">enterPressedEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Enter key was pressed.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventfirstpredicate-predicate-event" tabindex="-1"><a class="header-anchor" href="#eventfirstpredicate-predicate-event"><span><code>event.first(predicate: Predicate): Event</code></span></a></h4><h4 id="eventfirstfilter-filterfunction-event" tabindex="-1"><a class="header-anchor" href="#eventfirstfilter-filterfunction-event"><span><code>event.first(filter: FilterFunction): Event</code></span></a></h4><h4 id="eventfirstfilter-filter-event" tabindex="-1"><a class="header-anchor" href="#eventfirstfilter-filter-event"><span><code>event.first(filter: Filter): Event</code></span></a></h4><p>Creates a new event that will only be triggered once when the provided filter function returns <code>true</code>. This method is useful for handling one-time conditions in a stream of events.</p><ul><li>@param <code>{Filter&lt;T, P&gt;}</code> predicate - The filter function or predicate.</li><li>@returns <code>{Event&lt;P, R&gt;}</code> A new event that will be triggered only once when the filter condition is met.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sizeChangeEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sizeReachedEvent <span class="token operator">=</span> sizeChangeEvent<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span>size <span class="token operator">=&gt;</span> size <span class="token operator">&gt;</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sizeReachedEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Size threshold exceeded.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventmapmapper-mapper-event" tabindex="-1"><a class="header-anchor" href="#eventmapmapper-mapper-event"><span><code>event.map(mapper: Mapper): Event</code></span></a></h4><p>Transforms the data emitted by this event using a mapping function. Each emitted event is processed by the <code>mapper</code> function, which returns a new value that is then emitted by the returned <code>Event</code> instance. This is useful for data transformation or adapting the event&#39;s data structure.</p><ul><li>@template M The type of data that the mapper function will produce.</li><li>@template MR The type of data emitted by the mapped event, usually related to or the same as <code>M</code>.</li><li>@param <code>{Mapper&lt;T, M&gt;}</code> mapper A function that takes the original event data and returns the transformed data.</li><li>@returns <code>{Event&lt;M, MR&gt;}</code> A new <code>Event</code> instance that emits the mapped values.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Assuming an event that emits numbers, create a new event that emits their squares.</span></span>
<span class="line"><span class="token keyword">const</span> numberEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> squaredEvent <span class="token operator">=</span> numberEvent<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>num <span class="token operator">=&gt;</span> num num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">squaredEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>squared <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Squared number:&#39;</span><span class="token punctuation">,</span> squared<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">numberEvent</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs: &quot;Squared number: 25&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventreducereducer-reducer-init-a-event" tabindex="-1"><a class="header-anchor" href="#eventreducereducer-reducer-init-a-event"><span><code>event.reduce(reducer: Reducer, init?: A): Event</code></span></a></h4><h4 id="eventreducereducer-reducer-init-unknown-event" tabindex="-1"><a class="header-anchor" href="#eventreducereducer-reducer-init-unknown-event"><span><code>event.reduce(reducer: Reducer, ...init: unknown[]): Event</code></span></a></h4><p>Accumulates the values emitted by this event using a reducer function, starting from an initial value. The reducer function takes the accumulated value and the latest emitted event data, then returns a new accumulated value. This new value is then emitted by the returned <code>Event</code> instance. This is particularly useful for accumulating state over time.</p><ul><li>@template A The type of the accumulator value.</li><li>@template AR The type of data emitted by the reduced event, usually the same as <code>A</code>.</li><li>@param <code>{Reducer&lt;T, A&gt;}</code> reducer A function that takes the current accumulated value and the new event data, returning the new accumulated value.</li><li>@param <code>{A}</code> init The initial value of the accumulator.</li><li>@returns <code>{Event&lt;A, AR&gt;}</code> A new <code>Event</code> instance that emits the reduced value.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sumEvent <span class="token operator">=</span> numberEvent<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sumEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 3, 6</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">sumEvent</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">sumEvent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">sumEvent</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventexpandexpander-expander-event" tabindex="-1"><a class="header-anchor" href="#eventexpandexpander-expander-event"><span><code>event.expand(expander: Expander): Event</code></span></a></h4><p>Transforms each event&#39;s data into multiple events using an expander function. The expander function takes the original event&#39;s data and returns an array of new data elements, each of which will be emitted individually by the returned <code>Event</code> instance. This method is useful for scenarios where an event&#39;s data can naturally be expanded into multiple, separate pieces of data which should each trigger further processing independently.</p><ul><li>@template ET - The type of data elements in the array returned by the expander function.</li><li>@template ER - The type of responses emitted by the expanded event, usually related to or the same as <code>ET</code>.</li><li>@param <code>{Expander&lt;T, ET[]&gt;}</code> expander - A function that takes the original event data and returns an array of new data elements.</li><li>@returns <code>{Event&lt;ET, ER&gt;}</code> - A new <code>Event</code> instance that emits each value from the array returned by the expander function.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Assuming an event that emits a sentence, create a new event that emits each word from the sentence separately.</span></span>
<span class="line"><span class="token keyword">const</span> sentenceEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> wordEvent <span class="token operator">=</span> sentenceEvent<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>sentence <span class="token operator">=&gt;</span> sentence<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">wordEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Word:&#39;</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">sentenceEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs: &quot;Word: Hello&quot;, &quot;Word: world&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventorchestrateconductor-event-event" tabindex="-1"><a class="header-anchor" href="#eventorchestrateconductor-event-event"><span><code>event.orchestrate(conductor: Event): Event</code></span></a></h4><p>Creates a new event that emits values based on a conductor event. The orchestrated event will emit the last value captured from the original event each time the conductor event is triggered.</p><ul><li>@template T The type of data emitted by the original event.</li><li>@template R The type of data emitted by the orchestrated event, usually the same as <code>T</code>.</li><li>@param <code>{Event&lt;unknown, unknown&gt;}</code> conductor The event that triggers the emission of the last captured value.</li><li>@returns <code>{Event&lt;T, R&gt;}</code> A new event that emits values based on the conductor&#39;s triggers.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> rightClickPositionEvent <span class="token operator">=</span> mouseMoveEvent<span class="token punctuation">.</span><span class="token function">orchestrate</span><span class="token punctuation">(</span>mouseRightClickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// An event that emits whenever a &quot;tick&quot; event occurs.</span></span>
<span class="line"><span class="token keyword">const</span> tickEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> dataEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> synchronizedEvent <span class="token operator">=</span> dataEvent<span class="token punctuation">.</span><span class="token function">orchestrate</span><span class="token punctuation">(</span>tickEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">synchronizedEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Data on tick:&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">dataEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">dataEvent</span><span class="token punctuation">(</span><span class="token string">&#39;World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">tickEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs: &quot;Data on tick: World!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventdebounceinterval-number-event" tabindex="-1"><a class="header-anchor" href="#eventdebounceinterval-number-event"><span><code>event.debounce(interval: number): Event</code></span></a></h4><p>Creates a debounced event that delays triggering until after a specified interval has elapsed following the last time it was invoked. This method is particularly useful for limiting the rate at which a function is executed. Common use cases include handling rapid user inputs, window resizing, or scroll events.</p><ul><li>@param <code>{number}</code> interval - The amount of time to wait (in milliseconds) before firing the debounced event.</li><li>@returns <code>{Event&lt;T, R&gt;}</code> An event of debounced events.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> debouncedEvent <span class="token operator">=</span> textInputEvent<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">debouncedEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// only &#39;text&#39; is emitted</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;te&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;tex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">event</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventthrottleinterval-number-event" tabindex="-1"><a class="header-anchor" href="#eventthrottleinterval-number-event"><span><code>event.throttle(interval: number): Event</code></span></a></h4><p>Creates a throttled event that emits values at most once per specified interval.</p><p>This is useful for controlling the rate of event emissions, especially for high-frequency events. The throttled event will immediately emit the first value, and then only emit subsequent values if the specified interval has passed since the last emission.</p><ul><li>@param interval - The time interval (in milliseconds) between allowed emissions.</li><li>@returns A new Event that emits throttled values.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> scrollEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> throttledScroll <span class="token operator">=</span> scrollEvent<span class="token punctuation">.</span><span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Emit at most every 100ms</span></span>
<span class="line">throttledScroll<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Throttled scroll event&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventbatchinterval-number-size-number-event" tabindex="-1"><a class="header-anchor" href="#eventbatchinterval-number-size-number-event"><span><code>event.batch(interval: number, size?: number): Event</code></span></a></h4><p>Aggregates multiple event emissions into batches and emits the batched events either at specified time intervals or when the batch reaches a predefined size. This method is useful for grouping a high volume of events into manageable chunks, such as logging or processing data in bulk.</p><ul><li>@param <code>{number}</code> interval - The time in milliseconds between batch emissions.</li><li>@param <code>{number}</code> [size] - Optional. The maximum size of each batch. If specified, triggers a batch emission once the batch reaches this size, regardless of the interval.</li><li>@returns <code>{Event&lt;T[], R&gt;}</code> An event of the batched results.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Batch messages for bulk processing every 1 second or when 10 messages are collected</span></span>
<span class="line"><span class="token keyword">const</span> messageEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> batchedMessageEvent <span class="token operator">=</span> messageEvent<span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">batchedMessageEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Batched Messages:&#39;</span><span class="token punctuation">,</span> messages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="eventqueue-queue" tabindex="-1"><a class="header-anchor" href="#eventqueue-queue"><span><code>event.queue(): Queue</code></span></a></h4><p>Creates a queue from the event, where each emitted value is sequentially processed. The returned object allows popping elements from the queue, ensuring that elements are handled one at a time. This method is ideal for scenarios where order and sequential processing are critical.</p><ul><li>@returns <code>{Queue&lt;T&gt;}</code> An object representing the queue. The &#39;pop&#39; method retrieves the next element from the queue, while &#39;stop&#39; halts further processing.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Queueing tasks for sequential execution</span></span>
<span class="line"><span class="token keyword">const</span> taskEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> taskQueue <span class="token operator">=</span> taskEvent<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Processing:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> taskQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Processing: Task 1</span></span>
<span class="line">  <span class="token comment">// Queue also can be used as a Promise</span></span>
<span class="line">  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Processing:&#39;</span><span class="token punctuation">,</span> <span class="token keyword">await</span> taskQueue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Processing: Task 2</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">taskEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Task 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> <span class="token function">taskEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Task 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"> <span class="token comment">// Additionally, the queue can be used as an async iterator</span></span>
<span class="line"> <span class="token keyword">const</span> taskEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">const</span> taskQueue <span class="token operator">=</span> taskEvent<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> task <span class="token keyword">of</span> taskQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Processing:&#39;</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">await</span> <span class="token function">taskEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Task 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">await</span> <span class="token function">taskEvent</span><span class="token punctuation">(</span><span class="token string">&#39;Task 2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mergeevents-events-event" tabindex="-1"><a class="header-anchor" href="#mergeevents-events-event"><span><code>merge(...events: Events): Event</code></span></a></h3><p>Merges multiple events into a single event. This function takes any number of <code>Event</code> instances and returns a new <code>Event</code> that triggers whenever any of the input events trigger. The parameters and results of the merged event are derived from the input events, providing a flexible way to handle multiple sources of events in a unified manner.</p><ul><li>@template Events - An array of <code>Event</code> instances.</li><li>@param <code>{...Events}</code> events - A rest parameter that takes multiple events to be merged.</li><li>@returns <code>{Event&lt;AllEventsParameters&lt;Events&gt;, AllEventsResults&lt;Events&gt;&gt;}</code> - Returns a new <code>Event</code> instance that triggers with the parameters and results of any of the merged input events.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Merging mouse and keyboard events into a single event</span></span>
<span class="line"><span class="token keyword">const</span> mouseEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>MouseEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keyboardEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span>KeyboardEvent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> inputEvent <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">,</span> keyboardEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">inputEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>event <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Input event:&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createintervalinterval-number-event" tabindex="-1"><a class="header-anchor" href="#createintervalinterval-number-event"><span><code>createInterval(interval: number): Event</code></span></a></h3><p>Creates a periodic event that triggers at a specified interval. The event will automatically emit an incrementing counter value each time it triggers, starting from zero. This function is useful for creating time-based triggers within an application, such as updating UI elements, polling, or any other timed operation.</p><ul><li>@template R - The return type of the event handler function, defaulting to <code>void</code>.</li><li>@param <code>{number}</code> interval - The interval in milliseconds at which the event should trigger.</li><li>@returns <code>{Event&lt;number, R&gt;}</code> - An <code>Event</code> instance that triggers at the specified interval, emitting an incrementing counter value.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Creating an interval event that logs a message every second</span></span>
<span class="line"><span class="token keyword">const</span> tickEvent <span class="token operator">=</span> <span class="token function">createInterval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">tickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>tickNumber <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tick:&#39;</span><span class="token punctuation">,</span> tickNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="createevent-event" tabindex="-1"><a class="header-anchor" href="#createevent-event"><span><code>createEvent(): Event</code></span></a></h3><p>Creates a new instance of the <code>Event</code> class, which allows for the registration of event handlers that get called when the event is emitted. This factory function simplifies the creation of events by encapsulating the instantiation logic, providing a clean and simple API for event creation.</p><ul><li>@typeParam T - The tuple of argument types that the event will accept.</li><li>@typeParam R - The return type of the event handler function, which is emitted after processing the event data.</li><li>@returns <code>{Event&lt;T, R&gt;}</code> - A new instance of the <code>Event</code> class, ready to have listeners added to it.</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a new event that accepts a string and returns the string length</span></span>
<span class="line"><span class="token keyword">const</span> myEvent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createEvent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">myEvent</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>results <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs: [5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createEvent<span class="token punctuation">,</span> Event <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;evnty&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Creates a click event</span></span>
<span class="line">type Click <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">button</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> clickEvent <span class="token operator">=</span> createEvent<span class="token operator">&lt;</span>Click<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> button <span class="token punctuation">}</span><span class="token operator">:</span> Click</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Clicked button is&#39;</span><span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> unsubscribeClick <span class="token operator">=</span> clickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Creates a key press event</span></span>
<span class="line">type KeyPress <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> string <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> keyPressEvent <span class="token operator">=</span> createEvent<span class="token operator">&lt;</span>KeyPress<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleKeyPress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key <span class="token punctuation">}</span><span class="token operator">:</span> KeyPress</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Key pressed&#39;</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> unsubscribeKeyPress <span class="token operator">=</span> keyPressEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>handleKeyPress<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Merges click and key press events into input event</span></span>
<span class="line">type Input <span class="token operator">=</span> Click <span class="token operator">|</span> KeyPress<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">input</span><span class="token operator">:</span> Input</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Input&#39;</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> inputEvent <span class="token operator">=</span> Event<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>clickEvent<span class="token punctuation">,</span> keyPressEvent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">inputEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>handleInput<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Filters a click event to only include left-click events.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">handleLeftClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Left button is clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> leftClickEvent <span class="token operator">=</span> clickEvent<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> button <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> button <span class="token operator">===</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">leftClickEvent<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>handleLeftClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Will press Enter after one second</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span>keyPressEvent<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;Enter&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Waits once the first Enter key press event occurs</span></span>
<span class="line"><span class="token keyword">await</span> keyPressEvent<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">===</span> <span class="token string">&#39;Enter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onceAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">keyPressEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;W&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">keyPressEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">keyPressEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;S&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">keyPressEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;D&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token string">&#39;right&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token string">&#39;left&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">clickEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token string">&#39;middle&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Unsubscribe click listener</span></span>
<span class="line"><span class="token function">unsubscribeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// It does not log anything because of click listener is unsubscribed</span></span>
<span class="line">leftClickEvent<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>handleLeftClick<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Unsubscribe key press listener once first Esc key press occur</span></span>
<span class="line">unsubscribeKeyPress<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> keyPressEvent</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> key <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> key <span class="token operator">===</span> <span class="token string">&#39;Esc&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">onceAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Press Esc to unsubscribe key press listener</span></span>
<span class="line"><span class="token function">keyPressEvent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;Esc&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> messageEvent <span class="token operator">=</span> <span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> messagesBatchEvent <span class="token operator">=</span> messageEvent<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> messageEvent <span class="token operator">=</span> <span class="token function">createEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> messagesBatchEvent <span class="token operator">=</span> messageEvent<span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license"><span>License</span></a></h2><p>License <a href="./LICENSE">MIT</a> Copyright (c) 2024 Ivan Zakharchanka</p>`,173)]))}const r=s(o,[["render",c]]),u=JSON.parse('{"path":"/","title":"Evnty","lang":"en-US","frontmatter":{},"git":{"updatedTime":1746712308000,"contributors":[{"name":"Ivan Zakharchanka","username":"","email":"3axap4eHko@gmail.com","commits":29},{"name":"3axap4eHko","username":"3axap4eHko","email":"3axap4eHko@gmail.com","commits":4,"url":"https://github.com/3axap4eHko"}],"changelog":[{"hash":"fba720b972f6a3770cecbbd8c276102ca3bcda80","time":1746712308000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"implements signal and sequence"},{"hash":"430f886ae571b5242ac1781dd7df2e9db6c55264","time":1733116432000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"updates docs"},{"hash":"bf93c749c1bd395676b3c740a0d74282fef1613e","time":1730648651000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"addse settle method for the event"},{"hash":"acb09a1b018015c4150e01b1bc32ccbee733f6fb","time":1725230108000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"improves queue interface"},{"hash":"b625109db850f55b9d8ee45293c87952579d5c14","time":1721411939000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"updates readme"},{"hash":"968ec9a7a634d76abd81c8d12091ae5dfb891216","time":1721411760000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds a logo"},{"hash":"708b44eef688333b5db45649b620131c35a337ff","time":1721346756000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"docs fix"},{"hash":"427bc90703fbaba4cfb756a49e2e33b6830f6dc2","time":1721329237000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"docs fix"},{"hash":"232b6d70ab3ff80e50a6be3f41f46511716cc075","time":1721328540000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"v2"},{"hash":"f52d39d128eca3f81bc77671755e126a9057cdd4","time":1713672781000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"implements new methods: orchastrate, batch, queue and generator"},{"hash":"986de9c3240d11b7342f926aba5a81a0ad137fdd","time":1696024378000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"update readme"},{"hash":"b44ed4393d7f95ff9e1908aa6985773bc3d49b5e","time":1696010975000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"v2"},{"hash":"e6fabf845f564409ef3d4b04cacd0edbe02f1314","time":1694351250000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"update README"},{"hash":"ed2676ff5053a55098a77957ec472541922d0cf4","time":1694316463000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds node.js logo"},{"hash":"acff9b40f039aba51f5a625e5352a5293355c4dc","time":1694314722000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"adds method first to Event class"},{"hash":"b28af53b469611e6c77cf4b5d64e4f36b9d83b2c","time":1693861496000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"test fix"},{"hash":"8e130e4ac9c8f63e3512f2538c9b8056a413f8f6","time":1691549962000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"upgrade: prettier"},{"hash":"59e39c5c50f6013b3febf1ee5fd5cb6f50c75b54","time":1679440483000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"support ESM and CommonJS"},{"hash":"2aa0e07a33e5cf133e75e8f19b33c21fa36a27fd","time":1679179551000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"Added dismiss condition"},{"hash":"99f0a27d4423a437f3c7490db0ad1c57353ea54c","time":1667322834000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"upgrade"},{"hash":"09e527e20ef84500241d414392f3929a67d43b4a","time":1650941875000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"dismiss command"},{"hash":"104f8eaf6db802df46702727435fa7be50c28949","time":1650606947000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"Improved typing"},{"hash":"b8520099d6a1bf1e4062a3114b60770d5f125bbf","time":1613969485000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"updates"},{"hash":"87dc7d8ab5042885c4c97e0984fce7d1fe063256","time":1613968324000,"email":"3axap4eHko@gmail.com","author":"3axap4eHko","message":"type fix"},{"hash":"5ee986fda4dcbfb068abd9ab90b30303a1c25d91","time":1585260833000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"README updates"},{"hash":"cbb380fee4ed6da744a30668af39e53611b5c4d1","time":1572273218000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"readme update"},{"hash":"272af681f12ff42409f939c55d6109094de3f386","time":1570899902000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"map and reduce"},{"hash":"4bf5355a1ba5ae2a62443285cc33b3353db4c40f","time":1570568757000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"event merging and filtering"},{"hash":"dc0ee2a98e7fe098b4b1b4837b3592f0e894ad71","time":1563221914000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"ts implementation"},{"hash":"ff23f123b697644abd515b1cb68220b31f8a25b5","time":1562597488000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"codecov badge update"},{"hash":"c1de7dbcfcef9460b2a7017912821d6dd03133b6","time":1562596403000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"rename"},{"hash":"9c1503f7ab2236813fdf728f9dbfa0d284e75c2d","time":1562596028000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":"added test cases"},{"hash":"1d004143927e8dc3595482aa06f83d9f699dfbfc","time":1562595679000,"email":"3axap4eHko@gmail.com","author":"Ivan Zakharchanka","message":":bowtie:"}]},"filePathRelative":"index.md"}');export{r as comp,u as data};
